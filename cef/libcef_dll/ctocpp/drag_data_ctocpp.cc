// Copyright (c) 2011 The Chromium Embedded Framework Authors. All rights
// reserved. Use of this source code is governed by a BSD-style license that
// can be found in the LICENSE file.
//
// ---------------------------------------------------------------------------
//
// This file was generated by the CEF translator tool. If making changes by
// hand only do so within the body of existing method and function
// implementations. See the translator.README.txt file in the tools directory
// for more information.
//

#include "libcef_dll/ctocpp/drag_data_ctocpp.h"
#include "libcef_dll/transfer_util.h"


// VIRTUAL METHODS - Body may be edited by hand.

bool CefDragDataCToCpp::IsLink()
{
  if (CEF_MEMBER_MISSING(struct_, is_link))
    return false;

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  int _retval = struct_->is_link(struct_);

  // Return type: bool
  return _retval?true:false;
}


bool CefDragDataCToCpp::IsFragment()
{
  if (CEF_MEMBER_MISSING(struct_, is_fragment))
    return false;

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  int _retval = struct_->is_fragment(struct_);

  // Return type: bool
  return _retval?true:false;
}


bool CefDragDataCToCpp::IsFile()
{
  if (CEF_MEMBER_MISSING(struct_, is_file))
    return false;

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  int _retval = struct_->is_file(struct_);

  // Return type: bool
  return _retval?true:false;
}


CefString CefDragDataCToCpp::GetLinkURL()
{
  if (CEF_MEMBER_MISSING(struct_, get_link_url))
    return CefString();

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  cef_string_userfree_t _retval = struct_->get_link_url(struct_);

  // Return type: string
  CefString _retvalStr;
  _retvalStr.AttachToUserFree(_retval);
  return _retvalStr;
}


CefString CefDragDataCToCpp::GetLinkTitle()
{
  if (CEF_MEMBER_MISSING(struct_, get_link_title))
    return CefString();

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  cef_string_userfree_t _retval = struct_->get_link_title(struct_);

  // Return type: string
  CefString _retvalStr;
  _retvalStr.AttachToUserFree(_retval);
  return _retvalStr;
}


CefString CefDragDataCToCpp::GetLinkMetadata()
{
  if (CEF_MEMBER_MISSING(struct_, get_link_metadata))
    return CefString();

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  cef_string_userfree_t _retval = struct_->get_link_metadata(struct_);

  // Return type: string
  CefString _retvalStr;
  _retvalStr.AttachToUserFree(_retval);
  return _retvalStr;
}


CefString CefDragDataCToCpp::GetFragmentText()
{
  if (CEF_MEMBER_MISSING(struct_, get_fragment_text))
    return CefString();

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  cef_string_userfree_t _retval = struct_->get_fragment_text(struct_);

  // Return type: string
  CefString _retvalStr;
  _retvalStr.AttachToUserFree(_retval);
  return _retvalStr;
}


CefString CefDragDataCToCpp::GetFragmentHtml()
{
  if (CEF_MEMBER_MISSING(struct_, get_fragment_html))
    return CefString();

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  cef_string_userfree_t _retval = struct_->get_fragment_html(struct_);

  // Return type: string
  CefString _retvalStr;
  _retvalStr.AttachToUserFree(_retval);
  return _retvalStr;
}


CefString CefDragDataCToCpp::GetFragmentBaseURL()
{
  if (CEF_MEMBER_MISSING(struct_, get_fragment_base_url))
    return CefString();

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  cef_string_userfree_t _retval = struct_->get_fragment_base_url(struct_);

  // Return type: string
  CefString _retvalStr;
  _retvalStr.AttachToUserFree(_retval);
  return _retvalStr;
}


CefString CefDragDataCToCpp::GetFileExtension()
{
  if (CEF_MEMBER_MISSING(struct_, get_file_extension))
    return CefString();

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  cef_string_userfree_t _retval = struct_->get_file_extension(struct_);

  // Return type: string
  CefString _retvalStr;
  _retvalStr.AttachToUserFree(_retval);
  return _retvalStr;
}


CefString CefDragDataCToCpp::GetFileName()
{
  if (CEF_MEMBER_MISSING(struct_, get_file_name))
    return CefString();

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  cef_string_userfree_t _retval = struct_->get_file_name(struct_);

  // Return type: string
  CefString _retvalStr;
  _retvalStr.AttachToUserFree(_retval);
  return _retvalStr;
}


bool CefDragDataCToCpp::GetFileNames(std::vector<CefString>& names)
{
  if (CEF_MEMBER_MISSING(struct_, get_file_names))
    return false;

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Translate param: names; type: string_vec_byref
  cef_string_list_t namesList = cef_string_list_alloc();
  DCHECK(namesList);
  if (namesList)
    transfer_string_list_contents(names, namesList);

  // Execute
  int _retval = struct_->get_file_names(struct_,
      namesList);

  // Restore param:names; type: string_vec_byref
  if (namesList) {
    names.clear();
    transfer_string_list_contents(namesList, names);
    cef_string_list_free(namesList);
  }

  // Return type: bool
  return _retval?true:false;
}



#ifndef NDEBUG
template<> long CefCToCpp<CefDragDataCToCpp, CefDragData,
    cef_drag_data_t>::DebugObjCt = 0;
#endif

