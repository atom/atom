// Copyright (c) 2013 The Chromium Embedded Framework Authors. All rights
// reserved. Use of this source code is governed by a BSD-style license that
// can be found in the LICENSE file.
//
// ---------------------------------------------------------------------------
//
// This file was generated by the CEF translator tool. If making changes by
// hand only do so within the body of existing method and function
// implementations. See the translator.README.txt file in the tools directory
// for more information.
//

#include "libcef_dll/cpptoc/domvisitor_cpptoc.h"
#include "libcef_dll/cpptoc/string_visitor_cpptoc.h"
#include "libcef_dll/ctocpp/browser_ctocpp.h"
#include "libcef_dll/ctocpp/frame_ctocpp.h"
#include "libcef_dll/ctocpp/request_ctocpp.h"
#include "libcef_dll/ctocpp/v8context_ctocpp.h"


// VIRTUAL METHODS - Body may be edited by hand.

bool CefFrameCToCpp::IsValid() {
  if (CEF_MEMBER_MISSING(struct_, is_valid))
    return false;

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  int _retval = struct_->is_valid(struct_);

  // Return type: bool
  return _retval?true:false;
}

void CefFrameCToCpp::Undo() {
  if (CEF_MEMBER_MISSING(struct_, undo))
    return;

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  struct_->undo(struct_);
}

void CefFrameCToCpp::Redo() {
  if (CEF_MEMBER_MISSING(struct_, redo))
    return;

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  struct_->redo(struct_);
}

void CefFrameCToCpp::Cut() {
  if (CEF_MEMBER_MISSING(struct_, cut))
    return;

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  struct_->cut(struct_);
}

void CefFrameCToCpp::Copy() {
  if (CEF_MEMBER_MISSING(struct_, copy))
    return;

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  struct_->copy(struct_);
}

void CefFrameCToCpp::Paste() {
  if (CEF_MEMBER_MISSING(struct_, paste))
    return;

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  struct_->paste(struct_);
}

void CefFrameCToCpp::Delete() {
  if (CEF_MEMBER_MISSING(struct_, del))
    return;

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  struct_->del(struct_);
}

void CefFrameCToCpp::SelectAll() {
  if (CEF_MEMBER_MISSING(struct_, select_all))
    return;

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  struct_->select_all(struct_);
}

void CefFrameCToCpp::ViewSource() {
  if (CEF_MEMBER_MISSING(struct_, view_source))
    return;

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  struct_->view_source(struct_);
}

void CefFrameCToCpp::GetSource(CefRefPtr<CefStringVisitor> visitor) {
  if (CEF_MEMBER_MISSING(struct_, get_source))
    return;

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Verify param: visitor; type: refptr_diff
  DCHECK(visitor.get());
  if (!visitor.get())
    return;

  // Execute
  struct_->get_source(struct_,
      CefStringVisitorCppToC::Wrap(visitor));
}

void CefFrameCToCpp::GetText(CefRefPtr<CefStringVisitor> visitor) {
  if (CEF_MEMBER_MISSING(struct_, get_text))
    return;

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Verify param: visitor; type: refptr_diff
  DCHECK(visitor.get());
  if (!visitor.get())
    return;

  // Execute
  struct_->get_text(struct_,
      CefStringVisitorCppToC::Wrap(visitor));
}

void CefFrameCToCpp::LoadRequest(CefRefPtr<CefRequest> request) {
  if (CEF_MEMBER_MISSING(struct_, load_request))
    return;

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Verify param: request; type: refptr_same
  DCHECK(request.get());
  if (!request.get())
    return;

  // Execute
  struct_->load_request(struct_,
      CefRequestCToCpp::Unwrap(request));
}

void CefFrameCToCpp::LoadURL(const CefString& url) {
  if (CEF_MEMBER_MISSING(struct_, load_url))
    return;

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Verify param: url; type: string_byref_const
  DCHECK(!url.empty());
  if (url.empty())
    return;

  // Execute
  struct_->load_url(struct_,
      url.GetStruct());
}

void CefFrameCToCpp::LoadString(const CefString& string_val,
    const CefString& url) {
  if (CEF_MEMBER_MISSING(struct_, load_string))
    return;

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Verify param: string_val; type: string_byref_const
  DCHECK(!string_val.empty());
  if (string_val.empty())
    return;
  // Verify param: url; type: string_byref_const
  DCHECK(!url.empty());
  if (url.empty())
    return;

  // Execute
  struct_->load_string(struct_,
      string_val.GetStruct(),
      url.GetStruct());
}

void CefFrameCToCpp::ExecuteJavaScript(const CefString& code,
    const CefString& script_url, int start_line) {
  if (CEF_MEMBER_MISSING(struct_, execute_java_script))
    return;

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Verify param: code; type: string_byref_const
  DCHECK(!code.empty());
  if (code.empty())
    return;
  // Unverified params: script_url

  // Execute
  struct_->execute_java_script(struct_,
      code.GetStruct(),
      script_url.GetStruct(),
      start_line);
}

bool CefFrameCToCpp::IsMain() {
  if (CEF_MEMBER_MISSING(struct_, is_main))
    return false;

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  int _retval = struct_->is_main(struct_);

  // Return type: bool
  return _retval?true:false;
}

bool CefFrameCToCpp::IsFocused() {
  if (CEF_MEMBER_MISSING(struct_, is_focused))
    return false;

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  int _retval = struct_->is_focused(struct_);

  // Return type: bool
  return _retval?true:false;
}

CefString CefFrameCToCpp::GetName() {
  if (CEF_MEMBER_MISSING(struct_, get_name))
    return CefString();

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  cef_string_userfree_t _retval = struct_->get_name(struct_);

  // Return type: string
  CefString _retvalStr;
  _retvalStr.AttachToUserFree(_retval);
  return _retvalStr;
}

int64 CefFrameCToCpp::GetIdentifier() {
  if (CEF_MEMBER_MISSING(struct_, get_identifier))
    return 0;

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  int64 _retval = struct_->get_identifier(struct_);

  // Return type: simple
  return _retval;
}

CefRefPtr<CefFrame> CefFrameCToCpp::GetParent() {
  if (CEF_MEMBER_MISSING(struct_, get_parent))
    return NULL;

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  cef_frame_t* _retval = struct_->get_parent(struct_);

  // Return type: refptr_same
  return CefFrameCToCpp::Wrap(_retval);
}

CefString CefFrameCToCpp::GetURL() {
  if (CEF_MEMBER_MISSING(struct_, get_url))
    return CefString();

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  cef_string_userfree_t _retval = struct_->get_url(struct_);

  // Return type: string
  CefString _retvalStr;
  _retvalStr.AttachToUserFree(_retval);
  return _retvalStr;
}

CefRefPtr<CefBrowser> CefFrameCToCpp::GetBrowser() {
  if (CEF_MEMBER_MISSING(struct_, get_browser))
    return NULL;

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  cef_browser_t* _retval = struct_->get_browser(struct_);

  // Return type: refptr_same
  return CefBrowserCToCpp::Wrap(_retval);
}

CefRefPtr<CefV8Context> CefFrameCToCpp::GetV8Context() {
  if (CEF_MEMBER_MISSING(struct_, get_v8context))
    return NULL;

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  cef_v8context_t* _retval = struct_->get_v8context(struct_);

  // Return type: refptr_same
  return CefV8ContextCToCpp::Wrap(_retval);
}

void CefFrameCToCpp::VisitDOM(CefRefPtr<CefDOMVisitor> visitor) {
  if (CEF_MEMBER_MISSING(struct_, visit_dom))
    return;

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Verify param: visitor; type: refptr_diff
  DCHECK(visitor.get());
  if (!visitor.get())
    return;

  // Execute
  struct_->visit_dom(struct_,
      CefDOMVisitorCppToC::Wrap(visitor));
}


#ifndef NDEBUG
template<> long CefCToCpp<CefFrameCToCpp, CefFrame, cef_frame_t>::DebugObjCt =
    0;
#endif

