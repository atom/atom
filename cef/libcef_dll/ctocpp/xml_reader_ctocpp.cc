// Copyright (c) 2013 The Chromium Embedded Framework Authors. All rights
// reserved. Use of this source code is governed by a BSD-style license that
// can be found in the LICENSE file.
//
// ---------------------------------------------------------------------------
//
// This file was generated by the CEF translator tool. If making changes by
// hand only do so within the body of existing method and function
// implementations. See the translator.README.txt file in the tools directory
// for more information.
//

#include "libcef_dll/ctocpp/stream_reader_ctocpp.h"
#include "libcef_dll/ctocpp/xml_reader_ctocpp.h"


// STATIC METHODS - Body may be edited by hand.

CefRefPtr<CefXmlReader> CefXmlReader::Create(CefRefPtr<CefStreamReader> stream,
    EncodingType encodingType, const CefString& URI) {
  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Verify param: stream; type: refptr_same
  DCHECK(stream.get());
  if (!stream.get())
    return NULL;
  // Verify param: URI; type: string_byref_const
  DCHECK(!URI.empty());
  if (URI.empty())
    return NULL;

  // Execute
  cef_xml_reader_t* _retval = cef_xml_reader_create(
      CefStreamReaderCToCpp::Unwrap(stream),
      encodingType,
      URI.GetStruct());

  // Return type: refptr_same
  return CefXmlReaderCToCpp::Wrap(_retval);
}


// VIRTUAL METHODS - Body may be edited by hand.

bool CefXmlReaderCToCpp::MoveToNextNode() {
  if (CEF_MEMBER_MISSING(struct_, move_to_next_node))
    return false;

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  int _retval = struct_->move_to_next_node(struct_);

  // Return type: bool
  return _retval?true:false;
}

bool CefXmlReaderCToCpp::Close() {
  if (CEF_MEMBER_MISSING(struct_, close))
    return false;

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  int _retval = struct_->close(struct_);

  // Return type: bool
  return _retval?true:false;
}

bool CefXmlReaderCToCpp::HasError() {
  if (CEF_MEMBER_MISSING(struct_, has_error))
    return false;

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  int _retval = struct_->has_error(struct_);

  // Return type: bool
  return _retval?true:false;
}

CefString CefXmlReaderCToCpp::GetError() {
  if (CEF_MEMBER_MISSING(struct_, get_error))
    return CefString();

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  cef_string_userfree_t _retval = struct_->get_error(struct_);

  // Return type: string
  CefString _retvalStr;
  _retvalStr.AttachToUserFree(_retval);
  return _retvalStr;
}

CefXmlReader::NodeType CefXmlReaderCToCpp::GetType() {
  if (CEF_MEMBER_MISSING(struct_, get_type))
    return XML_NODE_UNSUPPORTED;

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  cef_xml_node_type_t _retval = struct_->get_type(struct_);

  // Return type: simple
  return _retval;
}

int CefXmlReaderCToCpp::GetDepth() {
  if (CEF_MEMBER_MISSING(struct_, get_depth))
    return 0;

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  int _retval = struct_->get_depth(struct_);

  // Return type: simple
  return _retval;
}

CefString CefXmlReaderCToCpp::GetLocalName() {
  if (CEF_MEMBER_MISSING(struct_, get_local_name))
    return CefString();

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  cef_string_userfree_t _retval = struct_->get_local_name(struct_);

  // Return type: string
  CefString _retvalStr;
  _retvalStr.AttachToUserFree(_retval);
  return _retvalStr;
}

CefString CefXmlReaderCToCpp::GetPrefix() {
  if (CEF_MEMBER_MISSING(struct_, get_prefix))
    return CefString();

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  cef_string_userfree_t _retval = struct_->get_prefix(struct_);

  // Return type: string
  CefString _retvalStr;
  _retvalStr.AttachToUserFree(_retval);
  return _retvalStr;
}

CefString CefXmlReaderCToCpp::GetQualifiedName() {
  if (CEF_MEMBER_MISSING(struct_, get_qualified_name))
    return CefString();

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  cef_string_userfree_t _retval = struct_->get_qualified_name(struct_);

  // Return type: string
  CefString _retvalStr;
  _retvalStr.AttachToUserFree(_retval);
  return _retvalStr;
}

CefString CefXmlReaderCToCpp::GetNamespaceURI() {
  if (CEF_MEMBER_MISSING(struct_, get_namespace_uri))
    return CefString();

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  cef_string_userfree_t _retval = struct_->get_namespace_uri(struct_);

  // Return type: string
  CefString _retvalStr;
  _retvalStr.AttachToUserFree(_retval);
  return _retvalStr;
}

CefString CefXmlReaderCToCpp::GetBaseURI() {
  if (CEF_MEMBER_MISSING(struct_, get_base_uri))
    return CefString();

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  cef_string_userfree_t _retval = struct_->get_base_uri(struct_);

  // Return type: string
  CefString _retvalStr;
  _retvalStr.AttachToUserFree(_retval);
  return _retvalStr;
}

CefString CefXmlReaderCToCpp::GetXmlLang() {
  if (CEF_MEMBER_MISSING(struct_, get_xml_lang))
    return CefString();

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  cef_string_userfree_t _retval = struct_->get_xml_lang(struct_);

  // Return type: string
  CefString _retvalStr;
  _retvalStr.AttachToUserFree(_retval);
  return _retvalStr;
}

bool CefXmlReaderCToCpp::IsEmptyElement() {
  if (CEF_MEMBER_MISSING(struct_, is_empty_element))
    return false;

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  int _retval = struct_->is_empty_element(struct_);

  // Return type: bool
  return _retval?true:false;
}

bool CefXmlReaderCToCpp::HasValue() {
  if (CEF_MEMBER_MISSING(struct_, has_value))
    return false;

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  int _retval = struct_->has_value(struct_);

  // Return type: bool
  return _retval?true:false;
}

CefString CefXmlReaderCToCpp::GetValue() {
  if (CEF_MEMBER_MISSING(struct_, get_value))
    return CefString();

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  cef_string_userfree_t _retval = struct_->get_value(struct_);

  // Return type: string
  CefString _retvalStr;
  _retvalStr.AttachToUserFree(_retval);
  return _retvalStr;
}

bool CefXmlReaderCToCpp::HasAttributes() {
  if (CEF_MEMBER_MISSING(struct_, has_attributes))
    return false;

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  int _retval = struct_->has_attributes(struct_);

  // Return type: bool
  return _retval?true:false;
}

size_t CefXmlReaderCToCpp::GetAttributeCount() {
  if (CEF_MEMBER_MISSING(struct_, get_attribute_count))
    return 0;

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  size_t _retval = struct_->get_attribute_count(struct_);

  // Return type: simple
  return _retval;
}

CefString CefXmlReaderCToCpp::GetAttribute(int index) {
  if (CEF_MEMBER_MISSING(struct_, get_attribute_byindex))
    return CefString();

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Verify param: index; type: simple_byval
  DCHECK_GE(index, 0);
  if (index < 0)
    return CefString();

  // Execute
  cef_string_userfree_t _retval = struct_->get_attribute_byindex(struct_,
      index);

  // Return type: string
  CefString _retvalStr;
  _retvalStr.AttachToUserFree(_retval);
  return _retvalStr;
}

CefString CefXmlReaderCToCpp::GetAttribute(const CefString& qualifiedName) {
  if (CEF_MEMBER_MISSING(struct_, get_attribute_byqname))
    return CefString();

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Verify param: qualifiedName; type: string_byref_const
  DCHECK(!qualifiedName.empty());
  if (qualifiedName.empty())
    return CefString();

  // Execute
  cef_string_userfree_t _retval = struct_->get_attribute_byqname(struct_,
      qualifiedName.GetStruct());

  // Return type: string
  CefString _retvalStr;
  _retvalStr.AttachToUserFree(_retval);
  return _retvalStr;
}

CefString CefXmlReaderCToCpp::GetAttribute(const CefString& localName,
    const CefString& namespaceURI) {
  if (CEF_MEMBER_MISSING(struct_, get_attribute_bylname))
    return CefString();

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Verify param: localName; type: string_byref_const
  DCHECK(!localName.empty());
  if (localName.empty())
    return CefString();
  // Verify param: namespaceURI; type: string_byref_const
  DCHECK(!namespaceURI.empty());
  if (namespaceURI.empty())
    return CefString();

  // Execute
  cef_string_userfree_t _retval = struct_->get_attribute_bylname(struct_,
      localName.GetStruct(),
      namespaceURI.GetStruct());

  // Return type: string
  CefString _retvalStr;
  _retvalStr.AttachToUserFree(_retval);
  return _retvalStr;
}

CefString CefXmlReaderCToCpp::GetInnerXml() {
  if (CEF_MEMBER_MISSING(struct_, get_inner_xml))
    return CefString();

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  cef_string_userfree_t _retval = struct_->get_inner_xml(struct_);

  // Return type: string
  CefString _retvalStr;
  _retvalStr.AttachToUserFree(_retval);
  return _retvalStr;
}

CefString CefXmlReaderCToCpp::GetOuterXml() {
  if (CEF_MEMBER_MISSING(struct_, get_outer_xml))
    return CefString();

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  cef_string_userfree_t _retval = struct_->get_outer_xml(struct_);

  // Return type: string
  CefString _retvalStr;
  _retvalStr.AttachToUserFree(_retval);
  return _retvalStr;
}

int CefXmlReaderCToCpp::GetLineNumber() {
  if (CEF_MEMBER_MISSING(struct_, get_line_number))
    return 0;

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  int _retval = struct_->get_line_number(struct_);

  // Return type: simple
  return _retval;
}

bool CefXmlReaderCToCpp::MoveToAttribute(int index) {
  if (CEF_MEMBER_MISSING(struct_, move_to_attribute_byindex))
    return false;

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Verify param: index; type: simple_byval
  DCHECK_GE(index, 0);
  if (index < 0)
    return false;

  // Execute
  int _retval = struct_->move_to_attribute_byindex(struct_,
      index);

  // Return type: bool
  return _retval?true:false;
}

bool CefXmlReaderCToCpp::MoveToAttribute(const CefString& qualifiedName) {
  if (CEF_MEMBER_MISSING(struct_, move_to_attribute_byqname))
    return false;

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Verify param: qualifiedName; type: string_byref_const
  DCHECK(!qualifiedName.empty());
  if (qualifiedName.empty())
    return false;

  // Execute
  int _retval = struct_->move_to_attribute_byqname(struct_,
      qualifiedName.GetStruct());

  // Return type: bool
  return _retval?true:false;
}

bool CefXmlReaderCToCpp::MoveToAttribute(const CefString& localName,
    const CefString& namespaceURI) {
  if (CEF_MEMBER_MISSING(struct_, move_to_attribute_bylname))
    return false;

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Verify param: localName; type: string_byref_const
  DCHECK(!localName.empty());
  if (localName.empty())
    return false;
  // Verify param: namespaceURI; type: string_byref_const
  DCHECK(!namespaceURI.empty());
  if (namespaceURI.empty())
    return false;

  // Execute
  int _retval = struct_->move_to_attribute_bylname(struct_,
      localName.GetStruct(),
      namespaceURI.GetStruct());

  // Return type: bool
  return _retval?true:false;
}

bool CefXmlReaderCToCpp::MoveToFirstAttribute() {
  if (CEF_MEMBER_MISSING(struct_, move_to_first_attribute))
    return false;

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  int _retval = struct_->move_to_first_attribute(struct_);

  // Return type: bool
  return _retval?true:false;
}

bool CefXmlReaderCToCpp::MoveToNextAttribute() {
  if (CEF_MEMBER_MISSING(struct_, move_to_next_attribute))
    return false;

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  int _retval = struct_->move_to_next_attribute(struct_);

  // Return type: bool
  return _retval?true:false;
}

bool CefXmlReaderCToCpp::MoveToCarryingElement() {
  if (CEF_MEMBER_MISSING(struct_, move_to_carrying_element))
    return false;

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  int _retval = struct_->move_to_carrying_element(struct_);

  // Return type: bool
  return _retval?true:false;
}


#ifndef NDEBUG
template<> long CefCToCpp<CefXmlReaderCToCpp, CefXmlReader,
    cef_xml_reader_t>::DebugObjCt = 0;
#endif

