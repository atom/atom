// Copyright (c) 2013 The Chromium Embedded Framework Authors. All rights
// reserved. Use of this source code is governed by a BSD-style license that
// can be found in the LICENSE file.
//
// ---------------------------------------------------------------------------
//
// This file was generated by the CEF translator tool. If making changes by
// hand only do so within the body of existing method and function
// implementations. See the translator.README.txt file in the tools directory
// for more information.
//

#include "libcef_dll/ctocpp/domdocument_ctocpp.h"
#include "libcef_dll/ctocpp/domevent_ctocpp.h"
#include "libcef_dll/ctocpp/domnode_ctocpp.h"


// VIRTUAL METHODS - Body may be edited by hand.

CefString CefDOMEventCToCpp::GetType() {
  if (CEF_MEMBER_MISSING(struct_, get_type))
    return CefString();

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  cef_string_userfree_t _retval = struct_->get_type(struct_);

  // Return type: string
  CefString _retvalStr;
  _retvalStr.AttachToUserFree(_retval);
  return _retvalStr;
}

CefDOMEvent::Category CefDOMEventCToCpp::GetCategory() {
  if (CEF_MEMBER_MISSING(struct_, get_category))
    return DOM_EVENT_CATEGORY_UNKNOWN;

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  cef_dom_event_category_t _retval = struct_->get_category(struct_);

  // Return type: simple
  return _retval;
}

CefDOMEvent::Phase CefDOMEventCToCpp::GetPhase() {
  if (CEF_MEMBER_MISSING(struct_, get_phase))
    return DOM_EVENT_PHASE_UNKNOWN;

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  cef_dom_event_phase_t _retval = struct_->get_phase(struct_);

  // Return type: simple
  return _retval;
}

bool CefDOMEventCToCpp::CanBubble() {
  if (CEF_MEMBER_MISSING(struct_, can_bubble))
    return false;

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  int _retval = struct_->can_bubble(struct_);

  // Return type: bool
  return _retval?true:false;
}

bool CefDOMEventCToCpp::CanCancel() {
  if (CEF_MEMBER_MISSING(struct_, can_cancel))
    return false;

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  int _retval = struct_->can_cancel(struct_);

  // Return type: bool
  return _retval?true:false;
}

CefRefPtr<CefDOMDocument> CefDOMEventCToCpp::GetDocument() {
  if (CEF_MEMBER_MISSING(struct_, get_document))
    return NULL;

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  cef_domdocument_t* _retval = struct_->get_document(struct_);

  // Return type: refptr_same
  return CefDOMDocumentCToCpp::Wrap(_retval);
}

CefRefPtr<CefDOMNode> CefDOMEventCToCpp::GetTarget() {
  if (CEF_MEMBER_MISSING(struct_, get_target))
    return NULL;

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  cef_domnode_t* _retval = struct_->get_target(struct_);

  // Return type: refptr_same
  return CefDOMNodeCToCpp::Wrap(_retval);
}

CefRefPtr<CefDOMNode> CefDOMEventCToCpp::GetCurrentTarget() {
  if (CEF_MEMBER_MISSING(struct_, get_current_target))
    return NULL;

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  cef_domnode_t* _retval = struct_->get_current_target(struct_);

  // Return type: refptr_same
  return CefDOMNodeCToCpp::Wrap(_retval);
}


#ifndef NDEBUG
template<> long CefCToCpp<CefDOMEventCToCpp, CefDOMEvent,
    cef_domevent_t>::DebugObjCt = 0;
#endif

