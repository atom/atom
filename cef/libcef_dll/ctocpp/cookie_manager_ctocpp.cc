// Copyright (c) 2013 The Chromium Embedded Framework Authors. All rights
// reserved. Use of this source code is governed by a BSD-style license that
// can be found in the LICENSE file.
//
// ---------------------------------------------------------------------------
//
// This file was generated by the CEF translator tool. If making changes by
// hand only do so within the body of existing method and function
// implementations. See the translator.README.txt file in the tools directory
// for more information.
//

#include "libcef_dll/cpptoc/cookie_visitor_cpptoc.h"
#include "libcef_dll/ctocpp/cookie_manager_ctocpp.h"
#include "libcef_dll/transfer_util.h"


// STATIC METHODS - Body may be edited by hand.

CefRefPtr<CefCookieManager> CefCookieManager::GetGlobalManager() {
  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  cef_cookie_manager_t* _retval = cef_cookie_manager_get_global_manager();

  // Return type: refptr_same
  return CefCookieManagerCToCpp::Wrap(_retval);
}

CefRefPtr<CefCookieManager> CefCookieManager::CreateManager(
    const CefString& path) {
  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Unverified params: path

  // Execute
  cef_cookie_manager_t* _retval = cef_cookie_manager_create_manager(
      path.GetStruct());

  // Return type: refptr_same
  return CefCookieManagerCToCpp::Wrap(_retval);
}


// VIRTUAL METHODS - Body may be edited by hand.

void CefCookieManagerCToCpp::SetSupportedSchemes(
    const std::vector<CefString>& schemes) {
  if (CEF_MEMBER_MISSING(struct_, set_supported_schemes))
    return;

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Translate param: schemes; type: string_vec_byref_const
  cef_string_list_t schemesList = cef_string_list_alloc();
  DCHECK(schemesList);
  if (schemesList)
    transfer_string_list_contents(schemes, schemesList);

  // Execute
  struct_->set_supported_schemes(struct_,
      schemesList);

  // Restore param:schemes; type: string_vec_byref_const
  if (schemesList)
    cef_string_list_free(schemesList);
}

bool CefCookieManagerCToCpp::VisitAllCookies(
    CefRefPtr<CefCookieVisitor> visitor) {
  if (CEF_MEMBER_MISSING(struct_, visit_all_cookies))
    return false;

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Verify param: visitor; type: refptr_diff
  DCHECK(visitor.get());
  if (!visitor.get())
    return false;

  // Execute
  int _retval = struct_->visit_all_cookies(struct_,
      CefCookieVisitorCppToC::Wrap(visitor));

  // Return type: bool
  return _retval?true:false;
}

bool CefCookieManagerCToCpp::VisitUrlCookies(const CefString& url,
    bool includeHttpOnly, CefRefPtr<CefCookieVisitor> visitor) {
  if (CEF_MEMBER_MISSING(struct_, visit_url_cookies))
    return false;

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Verify param: url; type: string_byref_const
  DCHECK(!url.empty());
  if (url.empty())
    return false;
  // Verify param: visitor; type: refptr_diff
  DCHECK(visitor.get());
  if (!visitor.get())
    return false;

  // Execute
  int _retval = struct_->visit_url_cookies(struct_,
      url.GetStruct(),
      includeHttpOnly,
      CefCookieVisitorCppToC::Wrap(visitor));

  // Return type: bool
  return _retval?true:false;
}

bool CefCookieManagerCToCpp::SetCookie(const CefString& url,
    const CefCookie& cookie) {
  if (CEF_MEMBER_MISSING(struct_, set_cookie))
    return false;

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Verify param: url; type: string_byref_const
  DCHECK(!url.empty());
  if (url.empty())
    return false;

  // Execute
  int _retval = struct_->set_cookie(struct_,
      url.GetStruct(),
      &cookie);

  // Return type: bool
  return _retval?true:false;
}

bool CefCookieManagerCToCpp::DeleteCookies(const CefString& url,
    const CefString& cookie_name) {
  if (CEF_MEMBER_MISSING(struct_, delete_cookies))
    return false;

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Unverified params: url, cookie_name

  // Execute
  int _retval = struct_->delete_cookies(struct_,
      url.GetStruct(),
      cookie_name.GetStruct());

  // Return type: bool
  return _retval?true:false;
}

bool CefCookieManagerCToCpp::SetStoragePath(const CefString& path) {
  if (CEF_MEMBER_MISSING(struct_, set_storage_path))
    return false;

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Unverified params: path

  // Execute
  int _retval = struct_->set_storage_path(struct_,
      path.GetStruct());

  // Return type: bool
  return _retval?true:false;
}


#ifndef NDEBUG
template<> long CefCToCpp<CefCookieManagerCToCpp, CefCookieManager,
    cef_cookie_manager_t>::DebugObjCt = 0;
#endif

