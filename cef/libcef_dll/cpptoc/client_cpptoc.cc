// Copyright (c) 2011 The Chromium Embedded Framework Authors. All rights
// reserved. Use of this source code is governed by a BSD-style license that
// can be found in the LICENSE file.
//
// ---------------------------------------------------------------------------
//
// This file was generated by the CEF translator tool. If making changes by
// hand only do so within the body of existing method and function
// implementations. See the translator.README.txt file in the tools directory
// for more information.
//

#include "libcef_dll/cpptoc/client_cpptoc.h"
#include "libcef_dll/cpptoc/display_handler_cpptoc.h"
#include "libcef_dll/cpptoc/drag_handler_cpptoc.h"
#include "libcef_dll/cpptoc/find_handler_cpptoc.h"
#include "libcef_dll/cpptoc/focus_handler_cpptoc.h"
#include "libcef_dll/cpptoc/jsdialog_handler_cpptoc.h"
#include "libcef_dll/cpptoc/keyboard_handler_cpptoc.h"
#include "libcef_dll/cpptoc/life_span_handler_cpptoc.h"
#include "libcef_dll/cpptoc/load_handler_cpptoc.h"
#include "libcef_dll/cpptoc/menu_handler_cpptoc.h"
#include "libcef_dll/cpptoc/print_handler_cpptoc.h"
#include "libcef_dll/cpptoc/render_handler_cpptoc.h"
#include "libcef_dll/cpptoc/request_handler_cpptoc.h"
#include "libcef_dll/cpptoc/v8context_handler_cpptoc.h"


// MEMBER FUNCTIONS - Body may be edited by hand.

cef_life_span_handler_t* CEF_CALLBACK client_get_life_span_handler(
    struct _cef_client_t* self)
{
  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self)
    return NULL;

  // Execute
  CefRefPtr<CefLifeSpanHandler> _retval = CefClientCppToC::Get(
      self)->GetLifeSpanHandler();

  // Return type: refptr_same
  return CefLifeSpanHandlerCppToC::Wrap(_retval);
}


cef_load_handler_t* CEF_CALLBACK client_get_load_handler(
    struct _cef_client_t* self)
{
  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self)
    return NULL;

  // Execute
  CefRefPtr<CefLoadHandler> _retval = CefClientCppToC::Get(
      self)->GetLoadHandler();

  // Return type: refptr_same
  return CefLoadHandlerCppToC::Wrap(_retval);
}


cef_request_handler_t* CEF_CALLBACK client_get_request_handler(
    struct _cef_client_t* self)
{
  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self)
    return NULL;

  // Execute
  CefRefPtr<CefRequestHandler> _retval = CefClientCppToC::Get(
      self)->GetRequestHandler();

  // Return type: refptr_same
  return CefRequestHandlerCppToC::Wrap(_retval);
}


cef_display_handler_t* CEF_CALLBACK client_get_display_handler(
    struct _cef_client_t* self)
{
  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self)
    return NULL;

  // Execute
  CefRefPtr<CefDisplayHandler> _retval = CefClientCppToC::Get(
      self)->GetDisplayHandler();

  // Return type: refptr_same
  return CefDisplayHandlerCppToC::Wrap(_retval);
}


cef_focus_handler_t* CEF_CALLBACK client_get_focus_handler(
    struct _cef_client_t* self)
{
  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self)
    return NULL;

  // Execute
  CefRefPtr<CefFocusHandler> _retval = CefClientCppToC::Get(
      self)->GetFocusHandler();

  // Return type: refptr_same
  return CefFocusHandlerCppToC::Wrap(_retval);
}


cef_keyboard_handler_t* CEF_CALLBACK client_get_keyboard_handler(
    struct _cef_client_t* self)
{
  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self)
    return NULL;

  // Execute
  CefRefPtr<CefKeyboardHandler> _retval = CefClientCppToC::Get(
      self)->GetKeyboardHandler();

  // Return type: refptr_same
  return CefKeyboardHandlerCppToC::Wrap(_retval);
}


cef_menu_handler_t* CEF_CALLBACK client_get_menu_handler(
    struct _cef_client_t* self)
{
  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self)
    return NULL;

  // Execute
  CefRefPtr<CefMenuHandler> _retval = CefClientCppToC::Get(
      self)->GetMenuHandler();

  // Return type: refptr_same
  return CefMenuHandlerCppToC::Wrap(_retval);
}


cef_print_handler_t* CEF_CALLBACK client_get_print_handler(
    struct _cef_client_t* self)
{
  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self)
    return NULL;

  // Execute
  CefRefPtr<CefPrintHandler> _retval = CefClientCppToC::Get(
      self)->GetPrintHandler();

  // Return type: refptr_same
  return CefPrintHandlerCppToC::Wrap(_retval);
}


cef_find_handler_t* CEF_CALLBACK client_get_find_handler(
    struct _cef_client_t* self)
{
  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self)
    return NULL;

  // Execute
  CefRefPtr<CefFindHandler> _retval = CefClientCppToC::Get(
      self)->GetFindHandler();

  // Return type: refptr_same
  return CefFindHandlerCppToC::Wrap(_retval);
}


cef_jsdialog_handler_t* CEF_CALLBACK client_get_jsdialog_handler(
    struct _cef_client_t* self)
{
  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self)
    return NULL;

  // Execute
  CefRefPtr<CefJSDialogHandler> _retval = CefClientCppToC::Get(
      self)->GetJSDialogHandler();

  // Return type: refptr_same
  return CefJSDialogHandlerCppToC::Wrap(_retval);
}


cef_v8context_handler_t* CEF_CALLBACK client_get_v8context_handler(
    struct _cef_client_t* self)
{
  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self)
    return NULL;

  // Execute
  CefRefPtr<CefV8ContextHandler> _retval = CefClientCppToC::Get(
      self)->GetV8ContextHandler();

  // Return type: refptr_same
  return CefV8ContextHandlerCppToC::Wrap(_retval);
}


cef_render_handler_t* CEF_CALLBACK client_get_render_handler(
    struct _cef_client_t* self)
{
  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self)
    return NULL;

  // Execute
  CefRefPtr<CefRenderHandler> _retval = CefClientCppToC::Get(
      self)->GetRenderHandler();

  // Return type: refptr_same
  return CefRenderHandlerCppToC::Wrap(_retval);
}


cef_drag_handler_t* CEF_CALLBACK client_get_drag_handler(
    struct _cef_client_t* self)
{
  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self)
    return NULL;

  // Execute
  CefRefPtr<CefDragHandler> _retval = CefClientCppToC::Get(
      self)->GetDragHandler();

  // Return type: refptr_same
  return CefDragHandlerCppToC::Wrap(_retval);
}



// CONSTRUCTOR - Do not edit by hand.

CefClientCppToC::CefClientCppToC(CefClient* cls)
    : CefCppToC<CefClientCppToC, CefClient, cef_client_t>(cls)
{
  struct_.struct_.get_life_span_handler = client_get_life_span_handler;
  struct_.struct_.get_load_handler = client_get_load_handler;
  struct_.struct_.get_request_handler = client_get_request_handler;
  struct_.struct_.get_display_handler = client_get_display_handler;
  struct_.struct_.get_focus_handler = client_get_focus_handler;
  struct_.struct_.get_keyboard_handler = client_get_keyboard_handler;
  struct_.struct_.get_menu_handler = client_get_menu_handler;
  struct_.struct_.get_print_handler = client_get_print_handler;
  struct_.struct_.get_find_handler = client_get_find_handler;
  struct_.struct_.get_jsdialog_handler = client_get_jsdialog_handler;
  struct_.struct_.get_v8context_handler = client_get_v8context_handler;
  struct_.struct_.get_render_handler = client_get_render_handler;
  struct_.struct_.get_drag_handler = client_get_drag_handler;
}

#ifndef NDEBUG
template<> long CefCppToC<CefClientCppToC, CefClient,
    cef_client_t>::DebugObjCt = 0;
#endif

