// Copyright (c) 2011 The Chromium Embedded Framework Authors. All rights
// reserved. Use of this source code is governed by a BSD-style license that
// can be found in the LICENSE file.
//
// ---------------------------------------------------------------------------
//
// This file was generated by the CEF translator tool. If making changes by
// hand only do so within the body of existing method and function
// implementations. See the translator.README.txt file in the tools directory
// for more information.
//

#include "libcef_dll/cpptoc/storage_visitor_cpptoc.h"


// MEMBER FUNCTIONS - Body may be edited by hand.

int CEF_CALLBACK storage_visitor_visit(struct _cef_storage_visitor_t* self,
    enum cef_storage_type_t type, const cef_string_t* origin,
    const cef_string_t* key, const cef_string_t* value, int count, int total,
    int* deleteData)
{
  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self)
    return 0;
  // Verify param: origin; type: string_byref_const
  DCHECK(origin);
  if (!origin)
    return 0;
  // Verify param: key; type: string_byref_const
  DCHECK(key);
  if (!key)
    return 0;
  // Verify param: value; type: string_byref_const
  DCHECK(value);
  if (!value)
    return 0;
  // Verify param: deleteData; type: bool_byref
  DCHECK(deleteData);
  if (!deleteData)
    return 0;

  // Translate param: deleteData; type: bool_byref
  bool deleteDataBool = (deleteData && *deleteData)?true:false;

  // Execute
  bool _retval = CefStorageVisitorCppToC::Get(self)->Visit(
      type,
      CefString(origin),
      CefString(key),
      CefString(value),
      count,
      total,
      deleteDataBool);

  // Restore param: deleteData; type: bool_byref
  if (deleteData)
    *deleteData = deleteDataBool?true:false;

  // Return type: bool
  return _retval;
}



// CONSTRUCTOR - Do not edit by hand.

CefStorageVisitorCppToC::CefStorageVisitorCppToC(CefStorageVisitor* cls)
    : CefCppToC<CefStorageVisitorCppToC, CefStorageVisitor,
        cef_storage_visitor_t>(cls)
{
  struct_.struct_.visit = storage_visitor_visit;
}

#ifndef NDEBUG
template<> long CefCppToC<CefStorageVisitorCppToC, CefStorageVisitor,
    cef_storage_visitor_t>::DebugObjCt = 0;
#endif

