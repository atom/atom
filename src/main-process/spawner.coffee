import ChildProcess from 'child_process';

// Spawn a command and invoke the callback when it completes with an error
// and the output from standard out.
//
// * `command`    The underlying OS command {String} to execute.
// * `args` (optional) The {Array} with arguments to be passed to command.
// * `callback` (optional) The {Function} to call after the command has run. It will be invoked with arguments:
//   * `error` (optional) An {Error} object returned by the command, `null` if no error was thrown.
//     * `code` Error code returned by the command.
//     * `stdout`  The {String} output text generated by the command.
//   * `stdout`  The {String} output text generated by the command.
//
// Returns `undefined`.
export function spawn(command, args, callback) {
  let error, spawnedProcess;
  let stdout = '';

  try {
    spawnedProcess = ChildProcess.spawn(command, args);
  } catch (error1) {
    // Spawn can throw an error
    error = error1;
    process.nextTick(() => typeof callback === 'function' ? callback(error, stdout) : undefined);
    return;
  }

  spawnedProcess.stdout.on('data', data => stdout += data);

  error = null;
  spawnedProcess.on('error', processError => error != null ? error : (error = processError));
  spawnedProcess.on('close', function(code, signal) {
    if (code !== 0) { if (error == null) { error = new Error(`Command failed: ${signal != null ? signal : code}`); } }
    if (error != null) {
      error.code != null ? error.code : (error.code = code);
    }
    if (error != null) {
      error.stdout != null ? error.stdout : (error.stdout = stdout);
    }
    return (typeof callback === 'function' ? callback(error, stdout) : undefined);
  });
  // This is necessary if using Powershell 2 on Windows 7 to get the events to raise
  // http://stackoverflow.com/questions/9155289/calling-powershell-from-nodejs
  return spawnedProcess.stdin.end();
}
