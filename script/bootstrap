#!/usr/bin/env node

var fs = require('fs');
var path = require('path');
var extend = require('util')._extend;
var execFile = require('child_process').execFile;
var which = require('./vendor/which/which');

var nodeVersion = process.versions.node.split('.')
var nodeMajorVersion = +nodeVersion[0]
var nodeMinorVersion = +nodeVersion[1]
if (nodeMajorVersion === 0 && nodeMinorVersion < 10) {
  console.warn("You must run script/bootstrap and script/build with node v0.10 or above");
  process.exit(1);
}

// Make sure python2.7 is installed
var python;
checkPython();

var safeExec = require('./utils/child-process-wrapper.js').safeExec;
var fs = require('fs');
var path = require('path');

// Executes an array of commands one by one.
function executeCommands(commands, done, index) {
  index = (index == undefined ? 0 : index);
  if (index < commands.length) {
    var command = commands[index];
    var options = null;
    if (typeof command !== 'string') {
      options = command.options;
      command = command.command;
    }
    safeExec(command, options, executeCommands.bind(this, commands, done, index + 1));
  } else
    done(null);
}

var apmInstallPath = path.resolve(__dirname, '..', 'apm');
if (!fs.existsSync(apmInstallPath))
  fs.mkdirSync(apmInstallPath);
if (!fs.existsSync(path.join(apmInstallPath, 'node_modules')))
  fs.mkdirSync(path.join(apmInstallPath, 'node_modules'));

var apmPath = path.resolve(__dirname, '..', 'apm', 'node_modules', 'atom-package-manager', 'bin', 'apm')
var apmFlags = process.env.JANKY_SHA1 || process.argv.indexOf('--no-color') !== -1 ? '--no-color' : '';

var npmPath = path.resolve(__dirname, '..', 'build', 'node_modules', '.bin', 'npm');
var initialNpmCommand = fs.existsSync(npmPath) ? npmPath : 'npm';
var npmFlags = ' --userconfig=' + path.resolve('.npmrc') + ' ';

var packagesToDedupe = ['fs-plus', 'humanize-plus', 'oniguruma', 'roaster', 'season'];
var echoNewLine = process.platform == 'win32' ? 'echo.' : 'echo';

var commands = [
  {command: initialNpmCommand + npmFlags + 'install --quiet', options: {cwd: path.resolve(__dirname, '..', 'build'), ignoreStdout: true}},
  {command: npmPath + npmFlags + 'install --quiet', options: {cwd: apmInstallPath, ignoreStdout: true}},
  echoNewLine,
  apmPath + ' clean ' + apmFlags,
  apmPath + ' install --quiet ' + apmFlags,
  apmPath + ' dedupe --quiet ' + apmFlags + ' ' + packagesToDedupe.join(' '),
];

process.chdir(path.dirname(__dirname));
executeCommands(commands, process.exit);


// Python checker
// source: https://github.com/TooTallNate/node-gyp/blob/52e8d9f70d/lib/configure.js

// Check if Python is in the $PATH
function checkPython () {
  python = process.env.PYTHON || 'python';
  which(python, function (err, execPath) {
    if (err) {
      process.platform == 'win32' ? guessPython() : failNoPython()
    } else {
      checkPythonVersion()
    }
  })
}

// Called on Windows when "python" isn't available in the current $PATH.
// We're gonna check if "%SystemDrive%\python27\python.exe" exists.
function guessPython () {
  var rootDir = process.env.SystemDrive || 'C:\\'
  if (rootDir[rootDir.length - 1] !== '\\') {
    rootDir += '\\'
  }
  var pythonPath = path.resolve(rootDir, 'Python27', 'python.exe')

  // ensuring that file exists
  fs.stat(pythonPath, function (err, stat) {
    if (err) {
      if (err.code == 'ENOENT') {
        failNoPython()
      } else {
        console.warn('fs.stat on ' + pythonPath + ' failed: ' + err)
        console.warn('Did you install python correctly?')
        process.exit(1)
      }
      return
    }
    python = pythonPath
    checkPythonVersion()
  })
}

function checkPythonVersion () {
  var env = extend({}, process.env);
  env.TERM = 'dumb';

  execFile(python, ['-c', 'import platform; print(platform.python_version());'], { env: env }, function (err, stdout) {
    if (err) {
      console.warn('Could not run python: ' + err)
      console.warn('Did you install python correctly?')
      process.exit(1)
      return
    }

    // Strip off unwanted characters
    var version = stdout.trim()
    version = version.replace(/\+/g, '')
    version = version.replace(/rc(.*)$/ig, '')

    var range = new RegExp('^\w*2.(5|6|7).[0-9]+\w*$')
    if (!range.test(version)) {
      console.warn('Python executable "' + python +
        '" is v' + version + ', which is not supported by gyp (requires python >= v2.5.0 & 3.0.0).\n' +
        'The recommended python version is 2.7.x.')
      process.exit(1)
    }
  })
}

function failNoPython () {
  console.warn('Can\'t find Python executable "' + python +
    '", you can set the PYTHON env variable.')
  console.warn('Did you install python2 >= 2.5.0?')
  process.exit(1)
}
