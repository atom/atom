{
	"displayName": "Git",
	"description": "Git SCM Integration",
	"command.clone": "Clone",
	"command.init": "Initialize Repository",
	"command.openRepository": "Open Repository",
	"command.close": "Close Repository",
	"command.refresh": "Refresh",
	"command.openChange": "Open Changes",
	"command.openFile": "Open File",
	"command.openHEADFile": "Open File (HEAD)",
	"command.stage": "Stage Changes",
	"command.stageAll": "Stage All Changes",
	"command.stageSelectedRanges": "Stage Selected Ranges",
	"command.revertSelectedRanges": "Revert Selected Ranges",
	"command.stageChange": "Stage Change",
	"command.revertChange": "Revert Change",
	"command.unstage": "Unstage Changes",
	"command.unstageAll": "Unstage All Changes",
	"command.unstageSelectedRanges": "Unstage Selected Ranges",
	"command.clean": "Discard Changes",
	"command.cleanAll": "Discard All Changes",
	"command.commit": "Commit",
	"command.commitStaged": "Commit Staged",
	"command.commitEmpty": "Commit Empty",
	"command.commitStagedSigned": "Commit Staged (Signed Off)",
	"command.commitStagedAmend": "Commit Staged (Amend)",
	"command.commitAll": "Commit All",
	"command.commitAllSigned": "Commit All (Signed Off)",
	"command.commitAllAmend": "Commit All (Amend)",
	"command.restoreCommitTemplate": "Restore Commit Template",
	"command.undoCommit": "Undo Last Commit",
	"command.checkout": "Checkout to...",
	"command.branch": "Create Branch...",
	"command.deleteBranch": "Delete Branch...",
	"command.renameBranch": "Rename Branch...",
	"command.merge": "Merge Branch...",
	"command.createTag": "Create Tag",
	"command.fetch": "Fetch",
	"command.fetchAll": "Fetch From All Remotes",
	"command.pull": "Pull",
	"command.pullRebase": "Pull (Rebase)",
	"command.pullFrom": "Pull from...",
	"command.push": "Push",
	"command.pushForce": "Push (Force)",
	"command.pushTo": "Push to...",
	"command.pushToForce": "Push to... (Force)",
	"command.pushWithTags": "Push With Tags",
	"command.pushWithTagsForce": "Push With Tags (Force)",
	"command.sync": "Sync",
	"command.syncRebase": "Sync (Rebase)",
	"command.publish": "Publish Branch",
	"command.showOutput": "Show Git Output",
	"command.ignore": "Add File to .gitignore",
	"command.stashIncludeUntracked": "Stash (Include Untracked)",
	"command.stash": "Stash",
	"command.stashPop": "Pop Stash...",
	"command.stashPopLatest": "Pop Latest Stash",
	"command.stashApply": "Apply Stash...",
	"command.stashApplyLatest": "Apply Latest Stash",
	"config.enabled": "Whether git is enabled.",
	"config.path": "Path and filename of the git executable, e.g. `C:\\Program Files\\Git\\bin\\git.exe` (Windows).",
	"config.autoRepositoryDetection": "Configures when repositories should be automatically detected.",
	"config.autoRepositoryDetection.true": "Scan for both subfolders of the current opened folder and parent folders of open files.",
	"config.autoRepositoryDetection.false": "Disable automatic repository scanning.",
	"config.autoRepositoryDetection.subFolders": "Scan for subfolders of the currently opened folder.",
	"config.autoRepositoryDetection.openEditors": "Scan for parent folders of open files.",
	"config.autorefresh": "Whether auto refreshing is enabled.",
	"config.autofetch": "When enabled, commits will automatically be fetched from the default remote of the current Git repository.",
	"config.confirmSync": "Confirm before synchronizing git repositories.",
	"config.countBadge": "Controls the git badge counter.",
	"config.countBadge.all": "Count all changes.",
	"config.countBadge.tracked": "Count only tracked changes.",
	"config.countBadge.off": "Turn off counter.",
	"config.checkoutType": "Controls what type of branches are listed when running `Checkout to...`.",
	"config.checkoutType.all": "Show all references.",
	"config.checkoutType.local": "Show only local branches.",
	"config.checkoutType.tags": "Show only tags.",
	"config.checkoutType.remote": "Show only remote branches.",
	"config.branchValidationRegex": "A regular expression to validate new branch names.",
	"config.branchWhitespaceChar": "The character to replace whitespace in new branch names.",
	"config.ignoreLegacyWarning": "Ignores the legacy Git warning.",
	"config.ignoreMissingGitWarning": "Ignores the warning when Git is missing.",
	"config.ignoreLimitWarning": "Ignores the warning when there are too many changes in a repository.",
	"config.defaultCloneDirectory": "The default location to clone a git repository.",
	"config.enableSmartCommit": "Commit all changes when there are no staged changes.",
	"config.enableCommitSigning": "Enables commit signing with GPG.",
	"config.discardAllScope": "Controls what changes are discarded by the `Discard all changes` command. `all` discards all changes. `tracked` discards only tracked files. `prompt` shows a prompt dialog every time the action is run.",
	"config.decorations.enabled": "Controls whether Git contributes colors and badges to the explorer and the open editors view.",
	"config.promptToSaveFilesBeforeCommit": "Controls whether Git should check for unsaved files before committing.",
	"config.postCommitCommand": "Runs a git command after a successful commit.",
	"config.postCommitCommand.none": "Don't run any command after a commit.",
	"config.postCommitCommand.push": "Run 'Git Push' after a successful commit.",
	"config.postCommitCommand.sync": "Run 'Git Sync' after a successful commit.",
	"config.showInlineOpenFileAction": "Controls whether to show an inline Open File action in the Git changes view.",
	"config.showPushSuccessNotification": "Controls whether to show a notification when a push is successful.",
	"config.inputValidation": "Controls when to show commit message input validation.",
	"config.inputValidationLength": "Controls the commit message length threshold for showing a warning.",
	"config.detectSubmodules": "Controls whether to automatically detect git submodules.",
	"config.detectSubmodulesLimit": "Controls the limit of git submodules detected.",
	"config.alwaysShowStagedChangesResourceGroup": "Always show the Staged Changes resource group.",
	"config.alwaysSignOff": "Controls the signoff flag for all commits.",
	"config.ignoredRepositories": "List of git repositories to ignore.",
	"config.scanRepositories": "List of paths to search for git repositories in.",
	"config.showProgress": "Controls whether git actions should show progress.",
	"config.rebaseWhenSync": "Force git to use rebase when running the sync command.",
	"config.confirmEmptyCommits": "Always confirm the creation of empty commits.",
	"config.fetchOnPull": "Fetch all branches when pulling or just the current one.",
	"config.allowForcePush": "Controls whether force push (with or without lease) is enabled.",
	"config.useForcePushWithLease": "Controls whether force pushing uses the safer force-with-lease variant.",
	"config.confirmForcePush": "Controls whether to ask for confirmation before force-pushing.",
	"config.openDiffOnClick": "Controls whether the diff editor should be opened when clicking a change. Otherwise the regular editor will be opened.",
	"colors.added": "Color for added resources.",
	"colors.modified": "Color for modified resources.",
	"colors.deleted": "Color for deleted resources.",
	"colors.untracked": "Color for untracked resources.",
	"colors.ignored": "Color for ignored resources.",
	"colors.conflict": "Color for resources with conflicts.",
	"colors.submodule": "Color for submodule resources."
}