{
  "name": "git",
  "displayName": "%displayName%",
  "description": "%description%",
  "publisher": "vscode",
  "version": "1.0.0",
  "engines": {
    "vscode": "^1.5.0"
  },
  "aiKey": "AIF-d9b70cd4-b9f9-4d70-929b-a071c400b217",
  "enableProposedApi": true,
  "categories": [
    "Other"
  ],
  "activationEvents": [
    "*"
  ],
  "main": "./out/main",
  "icon": "resources/icons/git.png",
  "scripts": {
    "compile": "gulp compile-extension:git",
    "watch": "gulp watch-extension:git",
    "update-grammar": "node ./build/update-grammars.js"
  },
  "contributes": {
    "commands": [
      {
        "command": "git.clone",
        "title": "%command.clone%",
        "category": "Git"
      },
      {
        "command": "git.init",
        "title": "%command.init%",
        "category": "Git",
        "icon": {
          "light": "resources/icons/light/git.svg",
          "dark": "resources/icons/dark/git.svg"
        }
      },
      {
        "command": "git.openRepository",
        "title": "%command.openRepository%",
        "category": "Git"
      },
      {
        "command": "git.close",
        "title": "%command.close%",
        "category": "Git"
      },
      {
        "command": "git.refresh",
        "title": "%command.refresh%",
        "category": "Git",
        "icon": {
          "light": "resources/icons/light/refresh.svg",
          "dark": "resources/icons/dark/refresh.svg"
        }
      },
      {
        "command": "git.openChange",
        "title": "%command.openChange%",
        "category": "Git",
        "icon": {
          "light": "resources/icons/light/open-change.svg",
          "dark": "resources/icons/dark/open-change.svg"
        }
      },
      {
        "command": "git.openFile",
        "title": "%command.openFile%",
        "category": "Git",
        "icon": {
          "light": "resources/icons/light/open-file.svg",
          "dark": "resources/icons/dark/open-file.svg"
        }
      },
      {
        "command": "git.openFile2",
        "title": "%command.openFile%",
        "category": "Git",
        "icon": {
          "light": "resources/icons/light/open-file-mono.svg",
          "dark": "resources/icons/dark/open-file-mono.svg"
        }
      },
      {
        "command": "git.openHEADFile",
        "title": "%command.openHEADFile%",
        "category": "Git"
      },
      {
        "command": "git.stage",
        "title": "%command.stage%",
        "category": "Git",
        "icon": {
          "light": "resources/icons/light/stage.svg",
          "dark": "resources/icons/dark/stage.svg"
        }
      },
      {
        "command": "git.stageAll",
        "title": "%command.stageAll%",
        "category": "Git",
        "icon": {
          "light": "resources/icons/light/stage.svg",
          "dark": "resources/icons/dark/stage.svg"
        }
      },
      {
        "command": "git.stageSelectedRanges",
        "title": "%command.stageSelectedRanges%",
        "category": "Git"
      },
      {
        "command": "git.revertSelectedRanges",
        "title": "%command.revertSelectedRanges%",
        "category": "Git"
      },
      {
        "command": "git.stageChange",
        "title": "%command.stageChange%",
        "category": "Git",
        "icon": {
          "light": "resources/icons/light/stage.svg",
          "dark": "resources/icons/dark/stage.svg"
        }
      },
      {
        "command": "git.revertChange",
        "title": "%command.revertChange%",
        "category": "Git",
        "icon": {
          "light": "resources/icons/light/clean.svg",
          "dark": "resources/icons/dark/clean.svg"
        }
      },
      {
        "command": "git.unstage",
        "title": "%command.unstage%",
        "category": "Git",
        "icon": {
          "light": "resources/icons/light/unstage.svg",
          "dark": "resources/icons/dark/unstage.svg"
        }
      },
      {
        "command": "git.unstageAll",
        "title": "%command.unstageAll%",
        "category": "Git",
        "icon": {
          "light": "resources/icons/light/unstage.svg",
          "dark": "resources/icons/dark/unstage.svg"
        }
      },
      {
        "command": "git.unstageSelectedRanges",
        "title": "%command.unstageSelectedRanges%",
        "category": "Git"
      },
      {
        "command": "git.clean",
        "title": "%command.clean%",
        "category": "Git",
        "icon": {
          "light": "resources/icons/light/clean.svg",
          "dark": "resources/icons/dark/clean.svg"
        }
      },
      {
        "command": "git.cleanAll",
        "title": "%command.cleanAll%",
        "category": "Git",
        "icon": {
          "light": "resources/icons/light/clean.svg",
          "dark": "resources/icons/dark/clean.svg"
        }
      },
      {
        "command": "git.commit",
        "title": "%command.commit%",
        "category": "Git",
        "icon": {
          "light": "resources/icons/light/check.svg",
          "dark": "resources/icons/dark/check.svg"
        }
      },
      {
        "command": "git.commitStaged",
        "title": "%command.commitStaged%",
        "category": "Git"
      },
      {
        "command": "git.commitEmpty",
        "title": "%command.commitEmpty%",
        "category": "Git"
      },
      {
        "command": "git.commitStagedSigned",
        "title": "%command.commitStagedSigned%",
        "category": "Git"
      },
      {
        "command": "git.commitStagedAmend",
        "title": "%command.commitStagedAmend%",
        "category": "Git"
      },
      {
        "command": "git.commitAll",
        "title": "%command.commitAll%",
        "category": "Git"
      },
      {
        "command": "git.commitAllSigned",
        "title": "%command.commitAllSigned%",
        "category": "Git"
      },
      {
        "command": "git.commitAllAmend",
        "title": "%command.commitAllAmend%",
        "category": "Git"
      },
      {
        "command": "git.restoreCommitTemplate",
        "title": "%command.restoreCommitTemplate%",
        "category": "Git"
      },
      {
        "command": "git.undoCommit",
        "title": "%command.undoCommit%",
        "category": "Git"
      },
      {
        "command": "git.checkout",
        "title": "%command.checkout%",
        "category": "Git"
      },
      {
        "command": "git.branch",
        "title": "%command.branch%",
        "category": "Git"
      },
      {
        "command": "git.deleteBranch",
        "title": "%command.deleteBranch%",
        "category": "Git"
      },
      {
        "command": "git.renameBranch",
        "title": "%command.renameBranch%",
        "category": "Git"
      },
      {
        "command": "git.merge",
        "title": "%command.merge%",
        "category": "Git"
      },
      {
        "command": "git.createTag",
        "title": "%command.createTag%",
        "category": "Git"
      },
      {
        "command": "git.fetch",
        "title": "%command.fetch%",
        "category": "Git"
      },
      {
        "command": "git.fetchAll",
        "title": "%command.fetchAll%",
        "category": "Git"
      },
      {
        "command": "git.pull",
        "title": "%command.pull%",
        "category": "Git"
      },
      {
        "command": "git.pullRebase",
        "title": "%command.pullRebase%",
        "category": "Git"
      },
      {
        "command": "git.pullFrom",
        "title": "%command.pullFrom%",
        "category": "Git"
      },
      {
        "command": "git.push",
        "title": "%command.push%",
        "category": "Git"
      },
      {
        "command": "git.pushForce",
        "title": "%command.pushForce%",
        "category": "Git"
      },
      {
        "command": "git.pushTo",
        "title": "%command.pushTo%",
        "category": "Git"
      },
      {
        "command": "git.pushToForce",
        "title": "%command.pushToForce%",
        "category": "Git"
      },
      {
        "command": "git.pushWithTags",
        "title": "%command.pushWithTags%",
        "category": "Git"
      },
      {
        "command": "git.pushWithTagsForce",
        "title": "%command.pushWithTagsForce%",
        "category": "Git"
      },
      {
        "command": "git.sync",
        "title": "%command.sync%",
        "category": "Git"
      },
      {
        "command": "git.syncRebase",
        "title": "%command.syncRebase%",
        "category": "Git"
      },
      {
        "command": "git.publish",
        "title": "%command.publish%",
        "category": "Git"
      },
      {
        "command": "git.showOutput",
        "title": "%command.showOutput%",
        "category": "Git"
      },
      {
        "command": "git.ignore",
        "title": "%command.ignore%",
        "category": "Git"
      },
      {
        "command": "git.stashIncludeUntracked",
        "title": "%command.stashIncludeUntracked%",
        "category": "Git"
      },
      {
        "command": "git.stash",
        "title": "%command.stash%",
        "category": "Git"
      },
      {
        "command": "git.stashPop",
        "title": "%command.stashPop%",
        "category": "Git"
      },
      {
        "command": "git.stashPopLatest",
        "title": "%command.stashPopLatest%",
        "category": "Git"
      },
      {
        "command": "git.stashApply",
        "title": "%command.stashApply%",
        "category": "Git"
      },
      {
        "command": "git.stashApplyLatest",
        "title": "%command.stashApplyLatest%",
        "category": "Git"
      }
    ],
    "menus": {
      "commandPalette": [
        {
          "command": "git.clone",
          "when": "config.git.enabled"
        },
        {
          "command": "git.init",
          "when": "config.git.enabled"
        },
        {
          "command": "git.openRepository",
          "when": "config.git.enabled"
        },
        {
          "command": "git.close",
          "when": "config.git.enabled && gitOpenRepositoryCount != 0"
        },
        {
          "command": "git.refresh",
          "when": "config.git.enabled && gitOpenRepositoryCount != 0"
        },
        {
          "command": "git.openFile",
          "when": "config.git.enabled && gitOpenRepositoryCount != 0"
        },
        {
          "command": "git.openHEADFile",
          "when": "config.git.enabled && gitOpenRepositoryCount != 0"
        },
        {
          "command": "git.openChange",
          "when": "config.git.enabled && gitOpenRepositoryCount != 0"
        },
        {
          "command": "git.stage",
          "when": "config.git.enabled && gitOpenRepositoryCount != 0"
        },
        {
          "command": "git.stageAll",
          "when": "config.git.enabled && gitOpenRepositoryCount != 0"
        },
        {
          "command": "git.stageSelectedRanges",
          "when": "config.git.enabled && gitOpenRepositoryCount != 0"
        },
        {
          "command": "git.stageChange",
          "when": "false"
        },
        {
          "command": "git.revertSelectedRanges",
          "when": "config.git.enabled && gitOpenRepositoryCount != 0"
        },
        {
          "command": "git.revertChange",
          "when": "false"
        },
        {
          "command": "git.openFile2",
          "when": "false"
        },
        {
          "command": "git.unstage",
          "when": "config.git.enabled && gitOpenRepositoryCount != 0"
        },
        {
          "command": "git.unstageAll",
          "when": "config.git.enabled && gitOpenRepositoryCount != 0"
        },
        {
          "command": "git.unstageSelectedRanges",
          "when": "config.git.enabled && gitOpenRepositoryCount != 0"
        },
        {
          "command": "git.clean",
          "when": "config.git.enabled && gitOpenRepositoryCount != 0 && !gitFreshRepository"
        },
        {
          "command": "git.cleanAll",
          "when": "config.git.enabled && gitOpenRepositoryCount != 0 && !gitFreshRepository"
        },
        {
          "command": "git.commit",
          "when": "config.git.enabled && gitOpenRepositoryCount != 0"
        },
        {
          "command": "git.commitStaged",
          "when": "config.git.enabled && gitOpenRepositoryCount != 0"
        },
        {
          "command": "git.commitStagedSigned",
          "when": "config.git.enabled && gitOpenRepositoryCount != 0"
        },
        {
          "command": "git.commitStagedAmend",
          "when": "config.git.enabled && gitOpenRepositoryCount != 0"
        },
        {
          "command": "git.commitAll",
          "when": "config.git.enabled && gitOpenRepositoryCount != 0"
        },
        {
          "command": "git.commitAllSigned",
          "when": "config.git.enabled && gitOpenRepositoryCount != 0"
        },
        {
          "command": "git.commitAllAmend",
          "when": "config.git.enabled && gitOpenRepositoryCount != 0"
        },
        {
          "command": "git.restoreCommitTemplate",
          "when": "false"
        },
        {
          "command": "git.undoCommit",
          "when": "config.git.enabled && gitOpenRepositoryCount != 0"
        },
        {
          "command": "git.checkout",
          "when": "config.git.enabled && gitOpenRepositoryCount != 0"
        },
        {
          "command": "git.branch",
          "when": "config.git.enabled && gitOpenRepositoryCount != 0"
        },
        {
          "command": "git.deleteBranch",
          "when": "config.git.enabled && gitOpenRepositoryCount != 0"
        },
        {
          "command": "git.renameBranch",
          "when": "config.git.enabled && gitOpenRepositoryCount != 0"
        },
        {
          "command": "git.pull",
          "when": "config.git.enabled && gitOpenRepositoryCount != 0"
        },
        {
          "command": "git.pullFrom",
          "when": "config.git.enabled && gitOpenRepositoryCount != 0"
        },
        {
          "command": "git.pullRebase",
          "when": "config.git.enabled && gitOpenRepositoryCount != 0"
        },
        {
          "command": "git.pullFrom",
          "when": "config.git.enabled && gitOpenRepositoryCount != 0"
        },
        {
          "command": "git.merge",
          "when": "config.git.enabled && gitOpenRepositoryCount != 0"
        },
        {
          "command": "git.createTag",
          "when": "config.git.enabled && gitOpenRepositoryCount != 0"
        },
        {
          "command": "git.fetch",
          "when": "config.git.enabled && gitOpenRepositoryCount != 0"
        },
        {
          "command": "git.fetchAll",
          "when": "config.git.enabled && gitOpenRepositoryCount != 0"
        },
        {
          "command": "git.push",
          "when": "config.git.enabled && gitOpenRepositoryCount != 0"
        },
        {
          "command": "git.pushForce",
          "when": "config.git.enabled && config.git.allowForcePush && gitOpenRepositoryCount != 0"
        },
        {
          "command": "git.pushTo",
          "when": "config.git.enabled && gitOpenRepositoryCount != 0"
        },
        {
          "command": "git.pushToForce",
          "when": "config.git.enabled && config.git.allowForcePush && gitOpenRepositoryCount != 0"
        },
        {
          "command": "git.pushWithTags",
          "when": "config.git.enabled && gitOpenRepositoryCount != 0"
        },
        {
          "command": "git.pushWithTagsForce",
          "when": "config.git.enabled && config.git.allowForcePush && gitOpenRepositoryCount != 0"
        },
        {
          "command": "git.sync",
          "when": "config.git.enabled && gitOpenRepositoryCount != 0"
        },
        {
          "command": "git.syncRebase",
          "when": "config.git.enabled && gitOpenRepositoryCount != 0"
        },
        {
          "command": "git.publish",
          "when": "config.git.enabled && gitOpenRepositoryCount != 0"
        },
        {
          "command": "git.showOutput",
          "when": "config.git.enabled"
        },
        {
          "command": "git.ignore",
          "when": "config.git.enabled && gitOpenRepositoryCount != 0"
        },
        {
          "command": "git.stashIncludeUntracked",
          "when": "config.git.enabled && gitOpenRepositoryCount != 0"
        },
        {
          "command": "git.stash",
          "when": "config.git.enabled && gitOpenRepositoryCount != 0"
        },
        {
          "command": "git.stashPop",
          "when": "config.git.enabled && gitOpenRepositoryCount != 0"
        },
        {
          "command": "git.stashPopLatest",
          "when": "config.git.enabled && gitOpenRepositoryCount != 0"
        },
        {
          "command": "git.stashApply",
          "when": "config.git.enabled && gitOpenRepositoryCount != 0"
        },
        {
          "command": "git.stashApplyLatest",
          "when": "config.git.enabled && gitOpenRepositoryCount != 0"
        }
      ],
      "scm/title": [
        {
          "command": "git.init",
          "group": "navigation",
          "when": "config.git.enabled && !scmProvider && gitOpenRepositoryCount == 0 && workspaceFolderCount != 0"
        },
        {
          "command": "git.commit",
          "group": "navigation",
          "when": "scmProvider == git"
        },
        {
          "command": "git.refresh",
          "group": "navigation",
          "when": "scmProvider == git"
        },
        {
          "command": "git.sync",
          "group": "1_sync",
          "when": "scmProvider == git"
        },
        {
          "command": "git.syncRebase",
          "group": "1_sync",
          "when": "scmProvider == git && gitState == idle"
        },
        {
          "command": "git.pull",
          "group": "1_sync",
          "when": "scmProvider == git"
        },
        {
          "command": "git.pullRebase",
          "group": "1_sync",
          "when": "scmProvider == git"
        },
        {
          "command": "git.pullFrom",
          "group": "1_sync",
          "when": "scmProvider == git"
        },
        {
          "command": "git.push",
          "group": "1_sync",
          "when": "scmProvider == git"
        },
        {
          "command": "git.pushTo",
          "group": "1_sync",
          "when": "scmProvider == git"
        },
        {
          "command": "git.publish",
          "group": "2_publish",
          "when": "scmProvider == git"
        },
        {
          "command": "git.commitStaged",
          "group": "3_commit",
          "when": "scmProvider == git"
        },
        {
          "command": "git.commitStagedSigned",
          "group": "3_commit",
          "when": "scmProvider == git"
        },
        {
          "command": "git.commitStagedAmend",
          "group": "3_commit",
          "when": "scmProvider == git"
        },
        {
          "command": "git.commitAll",
          "group": "3_commit",
          "when": "scmProvider == git"
        },
        {
          "command": "git.commitAllSigned",
          "group": "3_commit",
          "when": "scmProvider == git"
        },
        {
          "command": "git.commitAllAmend",
          "group": "3_commit",
          "when": "scmProvider == git"
        },
        {
          "command": "git.undoCommit",
          "group": "3_commit",
          "when": "scmProvider == git"
        },
        {
          "command": "git.stageAll",
          "group": "4_stage",
          "when": "scmProvider == git"
        },
        {
          "command": "git.unstageAll",
          "group": "4_stage",
          "when": "scmProvider == git"
        },
        {
          "command": "git.cleanAll",
          "group": "4_stage",
          "when": "scmProvider == git && !gitFreshRepository"
        },
        {
          "command": "git.stashIncludeUntracked",
          "group": "5_stash",
          "when": "scmProvider == git"
        },
        {
          "command": "git.stash",
          "group": "5_stash",
          "when": "scmProvider == git"
        },
        {
          "command": "git.stashPop",
          "group": "5_stash",
          "when": "scmProvider == git"
        },
        {
          "command": "git.stashPopLatest",
          "group": "5_stash",
          "when": "scmProvider == git"
        },
        {
          "command": "git.stashApply",
          "group": "5_stash",
          "when": "scmProvider == git"
        },
        {
          "command": "git.stashApplyLatest",
          "group": "5_stash",
          "when": "scmProvider == git"
        },
        {
          "command": "git.showOutput",
          "group": "7_repository",
          "when": "scmProvider == git"
        }
      ],
      "scm/sourceControl": [
        {
          "command": "git.close",
          "group": "navigation",
          "when": "scmProvider == git"
        }
      ],
      "scm/resourceGroup/context": [
        {
          "command": "git.stageAll",
          "when": "scmProvider == git && scmResourceGroup == merge",
          "group": "1_modification"
        },
        {
          "command": "git.stageAll",
          "when": "scmProvider == git && scmResourceGroup == merge",
          "group": "inline"
        },
        {
          "command": "git.unstageAll",
          "when": "scmProvider == git && scmResourceGroup == index",
          "group": "1_modification"
        },
        {
          "command": "git.unstageAll",
          "when": "scmProvider == git && scmResourceGroup == index",
          "group": "inline"
        },
        {
          "command": "git.cleanAll",
          "when": "scmProvider == git && scmResourceGroup == workingTree && !gitFreshRepository",
          "group": "1_modification"
        },
        {
          "command": "git.stageAll",
          "when": "scmProvider == git && scmResourceGroup == workingTree",
          "group": "1_modification"
        },
        {
          "command": "git.cleanAll",
          "when": "scmProvider == git && scmResourceGroup == workingTree && !gitFreshRepository",
          "group": "inline"
        },
        {
          "command": "git.stageAll",
          "when": "scmProvider == git && scmResourceGroup == workingTree",
          "group": "inline"
        }
      ],
      "scm/resourceState/context": [
        {
          "command": "git.stage",
          "when": "scmProvider == git && scmResourceGroup == merge",
          "group": "1_modification"
        },
        {
          "command": "git.openFile",
          "when": "scmProvider == git && scmResourceGroup == merge",
          "group": "navigation"
        },
        {
          "command": "git.stage",
          "when": "scmProvider == git && scmResourceGroup == merge",
          "group": "inline"
        },
        {
          "command": "git.openFile2",
          "when": "scmProvider == git && scmResourceGroup == merge && config.git.showInlineOpenFileAction && config.git.openDiffOnClick",
          "group": "inline0"
        },
        {
          "command": "git.openChange",
          "when": "scmProvider == git && scmResourceGroup == merge && config.git.showInlineOpenFileAction && !config.git.openDiffOnClick",
          "group": "inline0"
        },
        {
          "command": "git.openChange",
          "when": "scmProvider == git && scmResourceGroup == index",
          "group": "navigation"
        },
        {
          "command": "git.openFile",
          "when": "scmProvider == git && scmResourceGroup == index",
          "group": "navigation"
        },
        {
          "command": "git.openHEADFile",
          "when": "scmProvider == git && scmResourceGroup == index",
          "group": "navigation"
        },
        {
          "command": "git.unstage",
          "when": "scmProvider == git && scmResourceGroup == index",
          "group": "1_modification"
        },
        {
          "command": "git.unstage",
          "when": "scmProvider == git && scmResourceGroup == index",
          "group": "inline"
        },
        {
          "command": "git.openFile2",
          "when": "scmProvider == git && scmResourceGroup == index && config.git.showInlineOpenFileAction && config.git.openDiffOnClick",
          "group": "inline0"
        },
        {
          "command": "git.openChange",
          "when": "scmProvider == git && scmResourceGroup == index && config.git.showInlineOpenFileAction && !config.git.openDiffOnClick",
          "group": "inline0"
        },
        {
          "command": "git.openChange",
          "when": "scmProvider == git && scmResourceGroup == workingTree",
          "group": "navigation"
        },
        {
          "command": "git.openHEADFile",
          "when": "scmProvider == git && scmResourceGroup == workingTree",
          "group": "navigation"
        },
        {
          "command": "git.openFile",
          "when": "scmProvider == git && scmResourceGroup == workingTree",
          "group": "navigation"
        },
        {
          "command": "git.stage",
          "when": "scmProvider == git && scmResourceGroup == workingTree",
          "group": "1_modification"
        },
        {
          "command": "git.clean",
          "when": "scmProvider == git && scmResourceGroup == workingTree && !gitFreshRepository",
          "group": "1_modification"
        },
        {
          "command": "git.clean",
          "when": "scmProvider == git && scmResourceGroup == workingTree && !gitFreshRepository",
          "group": "inline"
        },
        {
          "command": "git.stage",
          "when": "scmProvider == git && scmResourceGroup == workingTree",
          "group": "inline"
        },
        {
          "command": "git.openFile2",
          "when": "scmProvider == git && scmResourceGroup == workingTree && config.git.showInlineOpenFileAction && config.git.openDiffOnClick",
          "group": "inline0"
        },
        {
          "command": "git.openChange",
          "when": "scmProvider == git && scmResourceGroup == workingTree && config.git.showInlineOpenFileAction && !config.git.openDiffOnClick",
          "group": "inline0"
        },
        {
          "command": "git.ignore",
          "when": "scmProvider == git && scmResourceGroup == workingTree",
          "group": "1_modification@3"
        }
      ],
      "editor/title": [
        {
          "command": "git.openFile",
          "group": "navigation",
          "when": "config.git.enabled && gitOpenRepositoryCount != 0 && isInDiffEditor && resourceScheme =~ /^git$|^file$/"
        },
        {
          "command": "git.openChange",
          "group": "navigation",
          "when": "config.git.enabled && gitOpenRepositoryCount != 0 && !isInDiffEditor && resourceScheme == file"
        },
        {
          "command": "git.stageSelectedRanges",
          "group": "2_git@1",
          "when": "config.git.enabled && gitOpenRepositoryCount != 0 && isInDiffEditor && resourceScheme =~ /^git$|^file$/"
        },
        {
          "command": "git.unstageSelectedRanges",
          "group": "2_git@2",
          "when": "config.git.enabled && gitOpenRepositoryCount != 0 && isInDiffEditor && resourceScheme =~ /^git$|^file$/"
        },
        {
          "command": "git.revertSelectedRanges",
          "group": "2_git@3",
          "when": "config.git.enabled && gitOpenRepositoryCount != 0 && isInDiffEditor && resourceScheme =~ /^git$|^file$/"
        }
      ],
      "editor/context": [
        {
          "command": "git.stageSelectedRanges",
          "group": "2_git@1",
          "when": "isInDiffRightEditor && config.git.enabled && gitOpenRepositoryCount != 0 && isInDiffEditor && resourceScheme =~ /^git$|^file$/"
        },
        {
          "command": "git.unstageSelectedRanges",
          "group": "2_git@2",
          "when": "isInDiffRightEditor && config.git.enabled && gitOpenRepositoryCount != 0 && isInDiffEditor && resourceScheme =~ /^git$|^file$/"
        },
        {
          "command": "git.revertSelectedRanges",
          "group": "2_git@3",
          "when": "isInDiffRightEditor && config.git.enabled && gitOpenRepositoryCount != 0 && isInDiffEditor && resourceScheme =~ /^git$|^file$/"
        }
      ],
      "scm/change/title": [
        {
          "command": "git.stageChange",
          "when": "originalResourceScheme == git"
        },
        {
          "command": "git.revertChange",
          "when": "originalResourceScheme == git"
        }
      ]
    },
    "configuration": {
      "title": "Git",
      "properties": {
        "git.enabled": {
          "type": "boolean",
          "scope": "resource",
          "description": "%config.enabled%",
          "default": true
        },
        "git.path": {
          "type": [
            "string",
            "null"
          ],
          "markdownDescription": "%config.path%",
          "default": null,
          "scope": "application"
        },
        "git.autoRepositoryDetection": {
          "type": [
            "boolean",
            "string"
          ],
          "enum": [
            true,
            false,
            "subFolders",
            "openEditors"
          ],
          "enumDescriptions": [
            "%config.autoRepositoryDetection.true%",
            "%config.autoRepositoryDetection.false%",
            "%config.autoRepositoryDetection.subFolders%",
            "%config.autoRepositoryDetection.openEditors%"
          ],
          "description": "%config.autoRepositoryDetection%",
          "default": true
        },
        "git.autorefresh": {
          "type": "boolean",
          "description": "%config.autorefresh%",
          "default": true
        },
        "git.autofetch": {
          "type": "boolean",
          "description": "%config.autofetch%",
          "default": false,
          "tags": [
            "usesOnlineServices"
          ]
        },
        "git.branchValidationRegex": {
          "type": "string",
          "description": "%config.branchValidationRegex%",
          "default": ""
        },
        "git.branchWhitespaceChar": {
          "type": "string",
          "description": "%config.branchWhitespaceChar%",
          "default": "-"
        },
        "git.confirmSync": {
          "type": "boolean",
          "description": "%config.confirmSync%",
          "default": true
        },
        "git.countBadge": {
          "type": "string",
          "enum": [
            "all",
            "tracked",
            "off"
          ],
          "enumDescriptions": [
            "%config.countBadge.all%",
            "%config.countBadge.tracked%",
            "%config.countBadge.off%"
          ],
          "description": "%config.countBadge%",
          "default": "all"
        },
        "git.checkoutType": {
          "type": "string",
          "enum": [
            "all",
            "local",
            "tags",
            "remote"
          ],
          "enumDescriptions": [
            "%config.checkoutType.all%",
            "%config.checkoutType.local%",
            "%config.checkoutType.tags%",
            "%config.checkoutType.remote%"
          ],
          "markdownDescription": "%config.checkoutType%",
          "default": "all"
        },
        "git.ignoreLegacyWarning": {
          "type": "boolean",
          "description": "%config.ignoreLegacyWarning%",
          "default": false
        },
        "git.ignoreMissingGitWarning": {
          "type": "boolean",
          "description": "%config.ignoreMissingGitWarning%",
          "default": false
        },
        "git.ignoreLimitWarning": {
          "type": "boolean",
          "description": "%config.ignoreLimitWarning%",
          "default": false
        },
        "git.defaultCloneDirectory": {
          "type": "string",
          "default": null,
          "description": "%config.defaultCloneDirectory%"
        },
        "git.enableSmartCommit": {
          "type": "boolean",
          "scope": "resource",
          "description": "%config.enableSmartCommit%",
          "default": false
        },
        "git.enableCommitSigning": {
          "type": "boolean",
          "scope": "resource",
          "description": "%config.enableCommitSigning%",
          "default": false
        },
        "git.confirmEmptyCommits": {
          "type": "boolean",
          "scope": "resource",
          "description": "%config.confirmEmptyCommits%",
          "default": true
        },
        "git.decorations.enabled": {
          "type": "boolean",
          "default": true,
          "description": "%config.decorations.enabled%"
        },
        "git.promptToSaveFilesBeforeCommit": {
          "type": "boolean",
          "scope": "resource",
          "default": true,
          "description": "%config.promptToSaveFilesBeforeCommit%"
        },
        "git.postCommitCommand": {
          "type": "string",
          "enum": [
            "none",
            "push",
            "sync"
          ],
          "enumDescriptions": [
            "%config.postCommitCommand.none%",
            "%config.postCommitCommand.push%",
            "%config.postCommitCommand.sync%"
          ],
          "markdownDescription": "%config.postCommitCommand%",
          "default": "none"
        },
        "git.showInlineOpenFileAction": {
          "type": "boolean",
          "default": true,
          "description": "%config.showInlineOpenFileAction%"
        },
        "git.showPushSuccessNotification": {
          "type": "boolean",
          "description": "%config.showPushSuccessNotification%",
          "default": false
        },
        "git.inputValidation": {
          "type": "string",
          "enum": [
            "always",
            "warn",
            "off"
          ],
          "default": "warn",
          "description": "%config.inputValidation%"
        },
        "git.inputValidationLength": {
          "type": "number",
          "default": 72,
          "description": "%config.inputValidationLength%"
        },
        "git.detectSubmodules": {
          "type": "boolean",
          "scope": "resource",
          "default": true,
          "description": "%config.detectSubmodules%"
        },
        "git.detectSubmodulesLimit": {
          "type": "number",
          "scope": "resource",
          "default": 10,
          "description": "%config.detectSubmodulesLimit%"
        },
        "git.alwaysShowStagedChangesResourceGroup": {
          "type": "boolean",
          "scope": "resource",
          "default": false,
          "description": "%config.alwaysShowStagedChangesResourceGroup%"
        },
        "git.alwaysSignOff": {
          "type": "boolean",
          "scope": "resource",
          "default": false,
          "description": "%config.alwaysSignOff%"
        },
        "git.ignoredRepositories": {
          "type": "array",
          "default": [],
          "scope": "window",
          "description": "%config.ignoredRepositories%"
        },
        "git.scanRepositories": {
          "type": "array",
          "default": [],
          "scope": "resource",
          "description": "%config.scanRepositories%"
        },
        "git.showProgress": {
          "type": "boolean",
          "description": "%config.showProgress%",
          "default": true,
          "scope": "resource"
        },
        "git.rebaseWhenSync": {
          "type": "boolean",
          "scope": "resource",
          "default": false,
          "description": "%config.rebaseWhenSync%"
        },
        "git.fetchOnPull": {
          "type": "boolean",
          "scope": "resource",
          "default": false,
          "description": "%config.fetchOnPull%"
        },
        "git.allowForcePush": {
          "type": "boolean",
          "default": false,
          "description": "%config.allowForcePush%"
        },
        "git.useForcePushWithLease": {
          "type": "boolean",
          "default": true,
          "description": "%config.useForcePushWithLease%"
        },
        "git.confirmForcePush": {
          "type": "boolean",
          "default": true,
          "description": "%config.confirmForcePush%"
        },
        "git.openDiffOnClick": {
          "type": "boolean",
          "default": true,
          "description": "%config.openDiffOnClick%"
        }
      }
    },
    "colors": [
      {
        "id": "gitDecoration.addedResourceForeground",
        "description": "%colors.added%",
        "defaults": {
          "light": "#587c0c",
          "dark": "#81b88b",
          "highContrast": "#1b5225"
        }
      },
      {
        "id": "gitDecoration.modifiedResourceForeground",
        "description": "%colors.modified%",
        "defaults": {
          "light": "#895503",
          "dark": "#E2C08D",
          "highContrast": "#E2C08D"
        }
      },
      {
        "id": "gitDecoration.deletedResourceForeground",
        "description": "%colors.deleted%",
        "defaults": {
          "light": "#ad0707",
          "dark": "#c74e39",
          "highContrast": "#c74e39"
        }
      },
      {
        "id": "gitDecoration.untrackedResourceForeground",
        "description": "%colors.untracked%",
        "defaults": {
          "light": "#007100",
          "dark": "#73C991",
          "highContrast": "#73C991"
        }
      },
      {
        "id": "gitDecoration.ignoredResourceForeground",
        "description": "%colors.ignored%",
        "defaults": {
          "light": "#8E8E90",
          "dark": "#8C8C8C",
          "highContrast": "#A7A8A9"
        }
      },
      {
        "id": "gitDecoration.conflictingResourceForeground",
        "description": "%colors.conflict%",
        "defaults": {
          "light": "#6c6cc4",
          "dark": "#6c6cc4",
          "highContrast": "#6c6cc4"
        }
      },
      {
        "id": "gitDecoration.submoduleResourceForeground",
        "description": "%colors.submodule%",
        "defaults": {
          "light": "#1258a7",
          "dark": "#8db9e2",
          "highContrast": "#8db9e2"
        }
      }
    ],
    "languages": [
      {
        "id": "git-commit",
        "aliases": [
          "Git Commit Message",
          "git-commit"
        ],
        "filenames": [
          "COMMIT_EDITMSG",
          "MERGE_MSG"
        ],
        "configuration": "./languages/git-commit.language-configuration.json"
      },
      {
        "id": "git-rebase",
        "aliases": [
          "Git Rebase Message",
          "git-rebase"
        ],
        "filenames": [
          "git-rebase-todo"
        ],
        "configuration": "./languages/git-rebase.language-configuration.json"
      },
      {
        "id": "diff",
        "aliases": [
          "Diff",
          "diff"
        ],
        "extensions": [
          ".patch",
          ".diff",
          ".rej"
        ],
        "configuration": "./languages/diff.language-configuration.json"
      },
      {
        "id": "ignore",
        "aliases": [
          "Ignore",
          "ignore"
        ],
        "filenames": [
          ".gitignore"
        ],
        "configuration": "./languages/ignore.language-configuration.json"
      }
    ],
    "grammars": [
      {
        "language": "git-commit",
        "scopeName": "text.git-commit",
        "path": "./syntaxes/git-commit.tmLanguage.json"
      },
      {
        "language": "git-rebase",
        "scopeName": "text.git-rebase",
        "path": "./syntaxes/git-rebase.tmLanguage.json"
      },
      {
        "language": "diff",
        "scopeName": "source.diff",
        "path": "./syntaxes/diff.tmLanguage.json"
      },
      {
        "language": "ignore",
        "scopeName": "source.ignore",
        "path": "./syntaxes/ignore.tmLanguage.json"
      }
    ],
    "configurationDefaults": {
      "[git-commit]": {
        "editor.rulers": [
          72
        ]
      }
    }
  },
  "dependencies": {
    "byline": "^5.0.0",
    "file-type": "^7.2.0",
    "iconv-lite": "^0.4.24",
    "jschardet": "^1.6.0",
    "vscode-extension-telemetry": "0.1.0",
    "vscode-nls": "^4.0.0",
    "which": "^1.3.0"
  },
  "devDependencies": {
    "@types/byline": "4.2.31",
    "@types/file-type": "^5.2.1",
    "@types/mocha": "2.2.43",
    "@types/node": "^8.10.25",
    "@types/which": "^1.0.28",
    "mocha": "^3.2.0"
  }
}